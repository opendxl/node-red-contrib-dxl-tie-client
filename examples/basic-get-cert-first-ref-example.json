[
    {
        "id": "57bd456f.096b3c",
        "type": "tab",
        "label": "TIE Get Certificate First References Example",
        "disabled": false,
        "info": "This sample invokes the TIE DXL service to retrieve the set of systems which\r\nhave referenced a certificate (as identified by hashes). The response to the\r\nTIE request is printed to the Node-RED `debug` tab.\r\n\r\n### Prerequisites\r\n\r\n* The samples configuration step has been completed (see the\r\n  [DXL Configuration Sample](https://github.com/opendxl/node-red-contrib-dxl/wiki/Client-Configuration)).\r\n* A TIE service is available on the DXL fabric.\r\n\r\n### Setup\r\n\r\n* Edit the `Specify hash request parameters` node and modify the `msg.sha1`\r\n  rule with the hash of the certificate and the `msg.publicKeySha1` rule with\r\n  the hash of the public key that you want to use for the lookup. Note that\r\n  the `msg.publicKeySha1` property is optional so this value can be set to an\r\n  empty string or the property may be removed entirely if the public key is\r\n  not known.\r\n\r\n* To deploy the flow, press the `Deploy` button in the upper-right corner of the\r\n  screen. If Node-RED is able to properly connect to the DXL fabric, a green dot\r\n  with the word `connected` should appear under the\r\n  `Get first references from TIE` node.\r\n\r\n### Running\r\n\r\nTo exercise the flow, double-click the button on the left side of the\r\n`Start flow` node.\r\n\r\n### Output\r\n\r\nThe output in the Node-RED `debug` tab should appear similar to the following:\r\n\r\n```\r\n▶ [ object, object]\r\n```\r\n\r\nClick on the right arrow buttons to expand the contents of the object. The\r\ncontent should look similar to the following:\r\n\r\n```\r\n▼ array[2]\r\n ▼ 0: object\r\n     date: 1475873692\r\n     agentGuid: \"{3a6f574a-3e6f-436d-acd4-bcde336b054d}\"\r\n ▼ 1: object\r\n     date: 1478626172\r\n     agentGuid: \"{68125cd6-a5d8-11e6-348e-000c29663178}\"\r\n```\r\n\r\nEach entry in the array is an object containing details about a system that has\r\nreferenced the certificate. The following information is included in each\r\nentry:\r\n\r\n* GUID of the system that referenced the certificate\r\n* Time the system first referenced the certificate\r\n\r\n### Details\r\n\r\nThe flow exercises the nodes below.\r\n\r\n#### Start flow\r\n\r\nThis is an `inject` input node which starts a new flow.\r\n\r\n#### Set hash request parameters\r\n\r\nThis is a `change` node which sets the hash of the certificate to the\r\n`msg.sha1` property and the hash of the associated public key to the\r\n`msg.publicKeySha1` property. The `Get first references from TIE` node uses the\r\n`sha1` and `publicKeySha1` properties when constructing the parameters for the\r\nTIE first references request. \r\n\r\n#### Get first references from TIE\r\n\r\nThis is a `tie get certificate first references` node. This node connects to\r\nthe DXL fabric and sends a DXL `Request` message to the TIE service to lookup\r\nfirst references information.\r\n\r\nThe request message also includes the `sha1` and `publicKeySha1` properties set\r\nby the `Set hash request parameters` node.\r\n\r\nThe `Return` property is set to \"a parsed JSON object\" to indicate that the\r\npayload for the response should be added to the output message as a JavaScript\r\nobject decoded from JSON.\r\n\r\n#### Output first references\r\n\r\nThis is a `debug` output node. This node outputs the `payload` set on\r\nthe message by the `Get first references from TIE` node. The output should\r\ninclude information for the systems that have referenced the certificate."
    },
    {
        "id": "fb15ff78.6b209",
        "type": "dxl-tie-get-certificate-first-references",
        "z": "57bd456f.096b3c",
        "name": "Get first references from TIE",
        "client": "",
        "returnType": "obj",
        "x": 340,
        "y": 200,
        "wires": [
            [
                "d8bf3597.02c458"
            ]
        ]
    },
    {
        "id": "9f0ad1f8.a4518",
        "type": "inject",
        "z": "57bd456f.096b3c",
        "name": "Start flow",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "d8c84b39.16fe78"
            ]
        ]
    },
    {
        "id": "d8bf3597.02c458",
        "type": "debug",
        "z": "57bd456f.096b3c",
        "name": "Output first references",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 600,
        "y": 200,
        "wires": []
    },
    {
        "id": "d8c84b39.16fe78",
        "type": "change",
        "z": "57bd456f.096b3c",
        "name": "Set hash request parameters",
        "rules": [
            {
                "t": "set",
                "p": "sha1",
                "pt": "msg",
                "to": "6eae26db8c13182a7947982991b4321732cc3de2",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "publicKeySha1",
                "pt": "msg",
                "to": "3b87a2d6f39770160364b79a152fcc73bae27adf",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 120,
        "wires": [
            [
                "fb15ff78.6b209"
            ]
        ]
    },
    {
        "id": "68630488.c6f59c",
        "type": "comment",
        "z": "57bd456f.096b3c",
        "name": "Supply the cert hashes in the 'Specify hash request parameters' node",
        "info": "",
        "x": 460,
        "y": 60,
        "wires": []
    }
]
